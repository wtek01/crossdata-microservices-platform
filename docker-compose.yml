version: '3.8'

services:
  eureka-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  config-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: config-server
    container_name: config-server
    ports:
      - "8888:8888"
    env_file:
      - .env
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  admin-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: admin-server
    container_name: admin-server
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
    container_name: api-gateway
    ports:
      - "8090:8090"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8090/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  product-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: product-service
    container_name: product-service
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-service
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  dashboard-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: dashboard-service
    container_name: dashboard-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    mem_limit: 512m
    cpus: 0.5
    networks:
      - microservices-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge